{"version":3,"sources":["webpack:///./src/app/common/signup-signin/forgetpassword/forgetpassword.component.html","webpack:///./src/app/common/signup-signin/forgetpassword/forgetpassword.component.scss","webpack:///./src/app/common/signup-signin/forgetpassword/forgetpassword.component.ts","webpack:///./src/app/common/signup-signin/login/login.component.html","webpack:///./src/app/common/signup-signin/login/login.component.ts","webpack:///./src/app/common/signup-signin/register/register.component.html","webpack:///./src/app/common/signup-signin/register/register.component.ts","webpack:///./src/app/common/signup-signin/reset-password/reset-password.component.html","webpack:///./src/app/common/signup-signin/reset-password/reset-password.component.scss","webpack:///./src/app/common/signup-signin/reset-password/reset-password.component.ts","webpack:///./src/app/common/signup-signin/services/register.service.ts","webpack:///./src/app/common/signup-signin/signup-signin.component.ts","webpack:///./src/app/common/signup-signin/signup-signin.module.ts","webpack:///./src/app/common/signup-signin/signup-signinRouting.module.ts"],"names":[],"mappings":"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","file":"common-signup-signin-signup-signin-module.js","sourcesContent":["module.exports = \"<div class=\\\"app-body\\\">\\n  <main class=\\\"main d-flex align-items-center\\\">\\n    <div class=\\\"container\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-5 mx-auto\\\">\\n          <div class=\\\"card-group\\\">\\n            <div class=\\\"card p-4\\\">\\n              <div class=\\\"card-body\\\">\\n                <form [formGroup]=\\\"forgetPasswordForm\\\"(ngSubmit)=\\\"forgetpassword()\\\">\\n                  <h1>Forget Password</h1>\\n                  <p class=\\\"text-muted\\\">Enter your email</p>\\n                  <div class=\\\"input-group mb-3\\\">\\n                    <div class=\\\"input-group-prepend\\\">\\n                      <span class=\\\"input-group-text\\\"><i class=\\\"fa fa-envelope-o\\\"></i></span>\\n                    </div>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName = \\\"userEmail\\\"placeholder=\\\"User Email\\\" autocomplete=\\\"username\\\" required>\\n                  \\n                  </div>\\n                  <p  style=\\\"color:red; font-size:12px\\\" class=\\\"error\\\" *ngIf=\\\"forgetPasswordForm.controls['userEmail'].hasError('required') && isSubmited\\\">\\n                    Email required\\n                  </p>\\n                  <p  style=\\\"color:red; font-size:12px\\\" class=\\\"error\\\" *ngIf=\\\"forgetPasswordForm.controls['userEmail'].hasError('pattern')\\\">\\n                    Invalid Email\\n                  </p>\\n                  \\n                 \\n                    <div class=\\\"col-sm-12\\\">\\n                      <button type=\\\"submit\\\" class=\\\"btn btn-primary px-4\\\" >Send mail</button>\\n                    </div>\\n  \\n              \\n                </form>\\n              </div>\\n            </div>\\n            <!-- <div class=\\\"card text-white bg-primary py-5 d-md-down-none\\\" style=\\\"width:44%\\\">\\n              <div class=\\\"card-body text-center\\\">\\n                <div>\\n                  <h2>Sign up</h2>\\n                  <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\\n                  <button type=\\\"button\\\" class=\\\"btn btn-primary active mt-3\\\">  <a routerLink=\\\"registration\\\" >Register Now!</a></button>\\n                </div>\\n              </div>\\n            </div> -->\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </main>\\n</div>\\n\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { Validators, FormControl, FormGroup, FormArray, FormBuilder } from '@angular/forms';\nimport { LoginService } from '../services/login.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { RouterModule ,Router  } from '@angular/router';\nimport { Route } from '@angular/compiler/src/core';\n@Component({\n  selector: 'app-forgetpassword',\n  templateUrl: './forgetpassword.component.html',\n  styleUrls: ['./forgetpassword.component.scss']\n})\nexport class ForgetpasswordComponent implements OnInit {\n  forgetPasswordForm : FormGroup;\n  isSubmited : boolean = false;\n  constructor(private formbuilder : FormBuilder,\n    private LoginService : LoginService,private toastr: ToastrService,private router:Router) {\n    this.forgetPasswordForm =this.formbuilder.group({\n      userEmail:['',[Validators.required,Validators.pattern(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)]]\n    })\n   }\n\n  ngOnInit() {\n  }\n  forgetpassword(){\n    if (this.forgetPasswordForm.invalid) {\n      this.isSubmited = true;\n      this.toastr.error(\"Invalid Credentials\");\n      return;\n    }\n    console.log(this.forgetPasswordForm.value);\n    this.LoginService.forgetpassword(this.forgetPasswordForm.value).subscribe(res=>{\n      if(res.code===200){\n        this.toastr.success(res.message);\n        this.router.navigate(['message_resetpassword'])\n        //model.open()\n      }\n      else if(res.code===202){\n        this.toastr.warning(res.message);\n\n      }\n      console.log(res);\n    })\n  }\n}\n","module.exports = \"<div class=\\\"app-body\\\">\\n  <main class=\\\"main d-flex align-items-center\\\">\\n    <div class=\\\"container\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-5 mx-auto\\\">\\n          <div class=\\\"card-group\\\">\\n            <div class=\\\"card p-4\\\">\\n              <div class=\\\"card-body\\\">\\n                <form [formGroup]=\\\"loginForm\\\"(ngSubmit)=\\\"login()\\\">\\n                  <h1>Login</h1>\\n                  <p class=\\\"text-muted\\\">Sign In to your account</p>\\n                  <div class=\\\"input-group mb-3\\\">\\n                    <div class=\\\"input-group-prepend\\\">\\n                      <span class=\\\"input-group-text\\\"><i class=\\\"fa fa-envelope-o\\\"></i></span>\\n                    </div>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName = \\\"userEmail\\\"placeholder=\\\"User Email\\\" autocomplete=\\\"username\\\" required>\\n                  \\n                  </div>\\n                  <p  style=\\\"color:red; font-size:12px\\\" class=\\\"error\\\" *ngIf=\\\"loginForm.controls['userEmail'].hasError('required') && isSubmited\\\">\\n                    Email required\\n                  </p>\\n                  <p  style=\\\"color:red; font-size:12px\\\" class=\\\"error\\\" *ngIf=\\\"loginForm.controls['userEmail'].hasError('pattern')\\\">\\n                    Invalid Email\\n                  </p>\\n                  <div class=\\\"input-group mb-4\\\">\\n                    <div class=\\\"input-group-prepend\\\">\\n                      <span class=\\\"input-group-text\\\"><i class=\\\"icon-lock\\\"></i></span>\\n                    </div>\\n                    <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName= \\\"userPassword\\\" placeholder=\\\" UserPassword\\\" autocomplete=\\\"current-password\\\" required>\\n                  </div>\\n                  <p style=\\\"color:red; font-size:12px\\\" class=\\\"error\\\" *ngIf=\\\"loginForm.controls['userPassword'].hasError('pattern')  && isSubmited\\\">\\n                    Password should be at least 8 characters long and should contain one number,one character and one special character\\n                  </p>\\n                  <div class=\\\"row\\\">\\n                    <div class=\\\"col-6\\\">\\n                      <button type=\\\"submit\\\" class=\\\"btn btn-primary px-4\\\">Login</button>\\n                    </div>\\n                    <div class=\\\"col-6 text-right\\\">\\n                      <a [routerLink]=\\\"['/login/forgetpassword']\\\" class=\\\"btn btn-link px-0\\\">Forgot password?</a>\\n                    </div>\\n                  </div>\\n                </form>\\n              </div>\\n            </div>\\n            <!-- <div class=\\\"card text-white bg-primary py-5 d-md-down-none\\\" style=\\\"width:44%\\\">\\n              <div class=\\\"card-body text-center\\\">\\n                <div>\\n                  <h2>Sign up</h2>\\n                  <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\\n                  <button type=\\\"button\\\" class=\\\"btn btn-primary active mt-3\\\">  <a routerLink=\\\"registration\\\" >Register Now!</a></button>\\n                </div>\\n              </div>\\n            </div> -->\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </main>\\n</div>\\n\\n\"","import { Component } from '@angular/core';\nimport { RouterModule ,Router  } from '@angular/router';\n\nimport { Validators, FormControl, FormGroup, FormArray, FormBuilder } from '@angular/forms';\nimport { LoginService } from '../services/login.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: 'login.component.html'\n})\nexport class LoginComponent {\n  public loginForm: FormGroup;\n  public user : any = {};\n  isSubmited : boolean = false;\n  constructor(private formbuilder : FormBuilder, private router : Router,\n              private LoginService : LoginService,private toastr: ToastrService)\n  {\n      this.loginForm =this.formbuilder.group({\n        userEmail:['',[Validators.required,Validators.pattern(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)]],\n        userPassword:['',[Validators.required,Validators.pattern('((?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,20})')]],\n\n      })\n  }\n  ngOnInit()\n  { \n    if(localStorage.getItem(\"token\"))\n    { \n      this.router.navigate([\"auth/superadmin\"]);\n    }\n    else{\n      this.router.navigate([\"login\"]);\n    }\n  }\n  login()\n  \n  {\n    if (this.loginForm.invalid) {\n      this.isSubmited = true;\n      this.toastr.error(\"Invalid Credentials\");\n      return;\n    }\n    let loginData ={\n      userEmail : this.loginForm.controls.userEmail.value ,\n      userPassword : this.loginForm.controls.userPassword.value\n    }\n    \n      this.LoginService.login(loginData).subscribe(res=>{\n        console.log(res);\n       \n        if(res.code === 200){\n          localStorage.token = res.data.token;\n          // localStorage.setItem(token,res.data.token);\n          this.toastr.success(res.message);\n          this.router.navigate([\"auth/superadmin\"]);\n        }else if(res.code ==201){\n          this.toastr.warning(res.message);\n        }else{\n          this.toastr.warning(res.message);\n        }\n      })\n\n  }\n \n }\n","module.exports = \"<div class=\\\"app-body\\\">\\n  <main class=\\\"main d-flex align-items-center\\\">\\n    <div class=\\\"container\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-6 mx-auto\\\">\\n          <div class=\\\"card mx-4\\\">\\n            <div class=\\\"card-body p-4\\\">\\n              <form [formGroup] = \\\"userRegistation\\\" (ngSubmit)= \\\"saveUserData()\\\">\\n                <h1>Register</h1>\\n                <p class=\\\"text-muted\\\">Create your account</p>\\n                <div class=\\\"input-group mb-3\\\">\\n                  <div class=\\\"input-group-prepend\\\">\\n                    <span class=\\\"input-group-text\\\"><i class=\\\"icon-user\\\"></i></span>\\n                  </div>\\n                  <input type=\\\"text\\\" formControlName=\\\"userName\\\" for class=\\\"form-control\\\" placeholder=\\\"Username\\\" autocomplete=\\\"username\\\" required>\\n                </div>\\n                <div class=\\\"input-group mb-3\\\">\\n                  <div class=\\\"input-group-prepend\\\">\\n                    <span class=\\\"input-group-text\\\">@</span>\\n                  </div>\\n                  <input type=\\\"text\\\" formControlName=\\\"userEmail\\\" class=\\\"form-control\\\" placeholder=\\\"Email\\\" autocomplete=\\\"email\\\" required>\\n                </div>\\n                <div class=\\\"input-group mb-3\\\">\\n                  <div class=\\\"input-group-prepend\\\">\\n                    <span class=\\\"input-group-text\\\"><i class=\\\"icon-lock\\\"></i></span>\\n                  </div>\\n                  <input type=\\\"password\\\" formControlName=\\\"userPassword\\\" class=\\\"form-control\\\" placeholder=\\\"Password\\\" autocomplete=\\\"new-password\\\" required>\\n                </div>\\n                <div class=\\\"input-group mb-4\\\">\\n                  <input type=\\\"file\\\" name=\\\"file\\\" class=\\\"form-control\\\" (change)=\\\"getFileData($event)\\\" required>\\n                </div>\\n                <button type=\\\"submit\\\" class=\\\"btn btn-block btn-success\\\">Create Account</button>\\n              </form>\\n            </div>\\n            <!-- <div class=\\\"card-footer p-4\\\">\\n              <div class=\\\"row\\\">\\n                <div class=\\\"col-6\\\">\\n                  <button class=\\\"btn btn-block btn-facebook\\\" type=\\\"button\\\"><span>facebook</span></button>\\n                </div>\\n                <div class=\\\"col-6\\\">\\n                  <button class=\\\"btn btn-block btn-twitter\\\" type=\\\"button\\\"><span>twitter</span></button>\\n                </div>\\n              </div>\\n            </div> -->\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </main>\\n</div>\\n\"","import { Router } from '@angular/router';\nimport { Component } from '@angular/core';\nimport { FormBuilder, Validator, FormGroup, Validators } from '@angular/forms';\n\nimport { RegistationService } from '../services/register.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: 'register.component.html'\n})\nexport class RegisterComponent {\n  public selectedFile: any;\n  public userRegistation: FormGroup;\n  constructor(\n    private RegistationService: RegistationService,\n    private FormBuilder: FormBuilder,\n    private Router : Router) {\n    this.userRegistation = this.FormBuilder.group({\n      userName: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(12)]],\n      userEmail: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(12)]],\n      userPassword: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(12)]],\n    });\n\n  }\n\n  getFileData(e) {\n    this.selectedFile = e.target.files[0];\n    console.log(this.selectedFile)\n  }\n  saveUserData() {\n\n    let data = {\n      userName: this.userRegistation.controls.userName.value,\n      userEmail: this.userRegistation.controls.userEmail.value,\n      userPassword: this.userRegistation.controls.userPassword.value,\n    }\n    const _formData = new FormData();\n    _formData.append('file', this.selectedFile);\n    _formData.append('userName', data.userName);\n    _formData.append('userEmail', data.userEmail);\n    _formData.append('userPassword', data.userPassword);\n    console.log(\"data>>\", data);\n\n    this.RegistationService.register(_formData).subscribe(res => {\n      console.log(\">>>\",res[status]);\n      if(res[status] === 200)\n      {\n        this.Router.navigate([\"/login\"]);\n      }\n    })\n  }\n\n\n}\n","module.exports = \"<div class=\\\"app-body\\\">\\n    <main class=\\\"main d-flex align-items-center\\\">\\n      <div class=\\\"container\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-md-5 mx-auto\\\">\\n            <div class=\\\"card-group\\\">\\n              <div class=\\\"card p-4\\\">\\n                <div class=\\\"card-body\\\">\\n                  <form [formGroup]=\\\"ResetPasswordForm\\\"(ngSubmit)=\\\"resetPassword()\\\">\\n                    <h1>Reset Password</h1>\\n                    <p class=\\\"text-muted\\\">New Password</p>\\n                    <div class=\\\"input-group mb-3\\\">\\n                      <div class=\\\"input-group-prepend\\\">\\n                        <span class=\\\"input-group-text\\\"><i class=\\\"icon-lock\\\"></i></span>\\n                      </div>\\n                      <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName = \\\"password\\\" placeholder=\\\"Password\\\" autocomplete=\\\"username\\\" required>\\n                    \\n                    </div>\\n                    <p style=\\\"color:red; font-size:12px\\\" class=\\\"error\\\" *ngIf=\\\"ResetPasswordForm.controls['password'].hasError('pattern')\\\">\\n                      Password should be at least 8 characters long and should contain one number,one character and one special character\\n                    </p> \\n                    <p class=\\\"text-muted\\\">Confirm_Password</p>\\n                    <div class=\\\"input-group mb-3\\\">\\n                      <div class=\\\"input-group-prepend\\\">\\n                        <span class=\\\"input-group-text\\\"><i class=\\\"icon-lock\\\"></i></span>\\n                      </div>\\n                      <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName = \\\"confirm_password\\\"placeholder=\\\"ConfirmPassword\\\" autocomplete=\\\"username\\\" required>\\n                    \\n                    </div>\\n                    <p style=\\\"color:red; font-size:12px\\\" class=\\\"error\\\" *ngIf=\\\"ResetPasswordForm.controls['confirm_password'].hasError('pattern')\\\">\\n                      Password should be at least 8 characters long and should contain one number,one character and one special character\\n                    </p> \\n                    <!-- <p style='color:red' *ngIf=\\\"ResetPasswordForm.get(['passwords','password']).value != ResetPasswordForm.get(['passwords','confirm_password']).value && ResetPasswordForm.get(['passwords','confirm_password']).value != null\\\">\\n                      Password does not match</p> -->\\n                    <!-- <p  style=\\\"color:red; font-size:12px\\\" class=\\\"error\\\" *ngIf=\\\"forgetPasswordForm.controls['userEmail'].hasError('required') && isSubmited\\\">\\n                      Email required\\n                    </p>\\n                    <p  style=\\\"color:red; font-size:12px\\\" class=\\\"error\\\" *ngIf=\\\"forgetPasswordForm.controls['userEmail'].hasError('pattern')\\\">\\n                      Invalid Email\\n                    </p> -->\\n                    \\n                   \\n                      <div class=\\\"col-sm-12\\\">\\n                        <button type=\\\"submit\\\" class=\\\"btn btn-primary px-4\\\">Submit</button>\\n                      </div>\\n    \\n                \\n                  </form>\\n                </div>\\n              </div>\\n              <!-- <div class=\\\"card text-white bg-primary py-5 d-md-down-none\\\" style=\\\"width:44%\\\">\\n                <div class=\\\"card-body text-center\\\">\\n                  <div>\\n                    <h2>Sign up</h2>\\n                    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\\n                    <button type=\\\"button\\\" class=\\\"btn btn-primary active mt-3\\\">  <a routerLink=\\\"registration\\\" >Register Now!</a></button>\\n                  </div>\\n                </div>\\n              </div> -->\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </main>\\n  </div>\\n  \\n  \"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { Validators, FormControl, FormGroup, FormArray, FormBuilder ,AbstractControl} from '@angular/forms';\nimport { LoginService } from '../services/login.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Route } from '@angular/compiler/src/core';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss']\n})\nexport class ResetPasswordComponent implements OnInit {\n  ResetPasswordForm : FormGroup;\n  isSubmited : boolean = false;\n  pageSlug : any;\n  constructor(private formbuilder : FormBuilder,\n    private LoginService : LoginService,private toastr: ToastrService ,\n    private route : ActivatedRoute\n, private router : Router) {\n    this.ResetPasswordForm =this.formbuilder.group({\n      password:['',[Validators.required,Validators.pattern('((?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,20})')]],\n      confirm_password:['',[Validators.required,Validators.pattern('((?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,20})')]]\n    }\n    , {validator: this.passwordConfirming})\n   }\n\n  ngOnInit() {\n    this.pageSlug =  this.route.snapshot.queryParams;\n    console.log(this.pageSlug)\n  }\n  passwordConfirming(c: AbstractControl): { invalid: boolean } {\n    if (c.get('password').value !== c.get('confirm_password').value) {\n        return {invalid: true};\n    }\n    else{\n     return {invalid : false};\n    }\n}\nresetPassword(){\n \n    if (this.ResetPasswordForm.invalid) {\n      this.isSubmited = true;\n      this.toastr.error(\"Invalid Credentials\");\n      return;\n    }\n    console.log(\"reset password\",this.ResetPasswordForm.value);\n    let resetData = {\n      value :this.ResetPasswordForm.value,\n      data :this.pageSlug\n    }\n    this.LoginService.ResetPassword(resetData).subscribe(res=>{\n      if(res.code===200){\n        this.toastr.success(res.message);\n        this.router.navigate(['message_resetpassword'])\n        //model.open()\n      }\n      else if(res.code===202){\n        this.toastr.warning(res.message);\n\n      }\n    })\n \n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n@Injectable()\nexport class RegistationService\n{\n    constructor(private httpClient :HttpClient){}\n\n    register(fileData)\n    {  \n        console.log(\"file data at service \",fileData);\n       return this.httpClient.post(\"http://localhost:3000/api/uploadFile\",fileData);\n    \n    }\n}","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-signup-signin',\n  template : '<router-outlet></router-outlet>',\n})\nexport class SignupSigninComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from \"@angular/core\";\nimport { HttpClientModule } from '@angular/common/http';\n\n\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport{ ForgetpasswordComponent } from \"./forgetpassword/forgetpassword.component\";\nimport { SignupSigninComponent } from \"./signup-signin.component\";\nimport { SignupSigninRoutingMoudle } from \"./signup-signinRouting.module\";\nimport { RouterModule } from \"@angular/router\";\nimport { LoginComponent } from \"./login/login.component\";\nimport { RegisterComponent } from \"./register/register.component\";\nimport { RegistationService } from \"./services/register.service\";\nimport { LoginService } from \"./services/login.service\";\nimport {ResetPasswordComponent} from \"./reset-password/reset-password.component\"\n@NgModule({\n    imports :\n    [\n        RouterModule,\n        SignupSigninRoutingMoudle,\n        ReactiveFormsModule,\n        FormsModule,\n        CommonModule,\n        HttpClientModule\n\n     ],\n    declarations : [SignupSigninComponent,\n        LoginComponent,\n        RegisterComponent,\n        ForgetpasswordComponent,\n        ResetPasswordComponent\n],\n    providers : [RegistationService ,LoginService]\n})\nexport class SignupSigninMoudle {}","import { RouterModule ,Routes  } from '@angular/router';\nimport { NgModule } from \"@angular/core\";\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { ForgetpasswordComponent } from './forgetpassword/forgetpassword.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\n\n\nconst routes : Routes = [\n    {\n        path :\"\" ,component : LoginComponent,\n\n    },\n    {\n        path :\"registration\" ,component : RegisterComponent\n    },\n     {\n        path :\"forgetpassword\" ,component : ForgetpasswordComponent\n    },\n    {\n        path:\"resetpassword\", component: ResetPasswordComponent\n    }\n    \n    \n]\n\n@NgModule({\nimports :[RouterModule.forChild(routes)],\nexports : [RouterModule]\n})\nexport class SignupSigninRoutingMoudle {}\n"],"sourceRoot":""}